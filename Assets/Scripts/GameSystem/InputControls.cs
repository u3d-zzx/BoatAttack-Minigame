//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Data/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Quality"",
            ""id"": ""90c74a97-38c9-4751-bff4-a9106cd24cec"",
            ""actions"": [
                {
                    ""name"": ""LOW"",
                    ""type"": ""Button"",
                    ""id"": ""3c8de23e-a19a-439e-81b2-3ffe96d2649c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MID"",
                    ""type"": ""Button"",
                    ""id"": ""b7a8cd11-5a6e-4040-bf12-27b9c7f8b4d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HIGH"",
                    ""type"": ""Button"",
                    ""id"": ""a9650df6-1436-4f68-8d9d-9c538d688831"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6faef59-d34c-4e0c-a039-647e49f776be"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad;TouchScreen"",
                    ""action"": ""LOW"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52235107-0679-4336-851a-04b4521c6797"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad;TouchScreen"",
                    ""action"": ""MID"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8efa641a-0b40-4ef5-a274-93ba84bedca4"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;TouchScreen;Gamepad"",
                    ""action"": ""HIGH"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BoatControls"",
            ""id"": ""ef127e39-c6d2-4d6f-8edc-46296d5de0cb"",
            ""actions"": [
                {
                    ""name"": ""Trottle"",
                    ""type"": ""Value"",
                    ""id"": ""591093b7-743c-42e6-b71e-bab02d178bd1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone(min=0.1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Time"",
                    ""type"": ""Value"",
                    ""id"": ""637a3778-b50e-41a0-8669-f7b1698fc4ca"",
                    ""expectedControlType"": """",
                    ""processors"": ""AxisDeadzone(min=0.1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""67e3403a-b3e8-43af-ab52-4575ba23afef"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone(min=0.1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""218640d2-e6dc-4136-842e-4621c0883e15"",
                    ""expectedControlType"": """",
                    ""processors"": ""AxisDeadzone(min=0.1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Freeze"",
                    ""type"": ""Button"",
                    ""id"": ""097a2ec8-8df3-4d48-96e5-fbf096270878"",
                    ""expectedControlType"": """",
                    ""processors"": ""AxisDeadzone(min=0.1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gyro"",
                    ""type"": ""Value"",
                    ""id"": ""b486793d-d208-4723-bba0-b9e46ac4747a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": ""AxisDeadzone(min=0.1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""4c0cef02-73da-4e4e-83fe-9a95e50f6560"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""AxisDeadzone(min=0.1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gravity"",
                    ""type"": ""Value"",
                    ""id"": ""3e54dda4-a4cb-4861-bfac-5f00144a6974"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": ""AxisDeadzone(min=0.1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Triggers"",
                    ""id"": ""3466fe24-0064-418d-9331-557be3fdcac4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trottle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""eff0cde8-c5f9-43b6-86e8-8385017c8985"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e7382d1c-3b18-4582-9511-5569c858581e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Buttons"",
                    ""id"": ""e1093b33-e798-4080-866e-f94010a4d7e0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trottle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b9957a1f-893b-4ee8-9579-667c3bb073d3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""de45f7f3-08ae-4508-a9d8-aca8191f35a1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""4caeca52-a08d-469a-a986-778564c27c84"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trottle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6b1d89c6-a8e7-4b32-9c05-f848bb1064a8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b25a71de-239c-4d0a-8050-0169566cea38"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WSAD"",
                    ""id"": ""1d540095-a749-43de-89cd-2806255106e3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trottle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c59fc22d-e257-4273-9159-4416a56a15d0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a91b562c-2ac5-4d79-9a5b-1f2e59241e92"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Alt"",
                    ""id"": ""edd450a3-5814-4902-80ec-bcc25edd0366"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trottle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""71ae2e67-e9b6-4a48-9669-38e7fe243cbc"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a1291229-823b-4ede-82e6-090bc1bdfa21"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""30ce0b9b-3da0-420a-abc3-8f2040388953"",
                    ""path"": ""<Touchscreen>/touch/position/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Trottle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""LeftThumbstick"",
                    ""id"": ""01df8425-ce9a-4024-bad4-0f5e8002094f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3866264b-46e4-428b-9624-ada67f2de7bd"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9a637b8c-8d48-42f2-9cef-114e3b8bb2ba"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""b5b408fa-df11-4ebc-b589-5ff03be94ba1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""010e7196-f4dd-4d5c-8f42-f47f3984bc01"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""36de1a52-c485-4d40-8d4d-323d8fe73445"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WSAD"",
                    ""id"": ""24d9ae40-f8f8-4a39-abbe-68ce064083f8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c07695cd-a24b-4ba5-8162-fd6c1d55667a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""72970fc1-f5b9-4e7b-bfb0-8356935a6274"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d3dbb25-9147-4e77-ae9d-04d1c01d2666"",
                    ""path"": ""<Touchscreen>/tilt/x"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""groups"": ""TouchScreen;Gamepad"",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a7ffffc-09c1-403a-b879-7a91dfb5b29d"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b449cb97-f7cf-448b-9aa9-900c8085c53d"",
                    ""path"": ""<Keyboard>/#(r)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8b1e58a-fd18-487f-ae58-dc92e5273625"",
                    ""path"": ""<Touchscreen>/primaryTouch/tapCount"",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbe374df-c0a2-4067-8743-605cc47e112b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Freeze"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c9efbd8-b12e-4a6d-9787-042b4abda799"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Freeze"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7d3341c-7abe-48e6-a68e-b27eb3927b79"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Dpad horizontal"",
                    ""id"": ""3c94f068-2cc6-4d07-a76a-3835151e0b0e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""aa687506-3f38-4cdc-8f14-f77ce23789d9"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""59cadf6b-f60d-4a7e-9b9c-a21ecfdfb51e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""e8db53d1-5ded-40fe-965b-727f321a403a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Time"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d5357c68-6b8a-4c12-996c-801c5a015beb"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9a495693-8098-4d83-b2d6-711526e83c37"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""38dc845f-f219-4b56-947c-542a4cf33da6"",
                    ""path"": ""<Touchscreen>/primaryTouch/tapCount"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": ""TouchScreen"",
                    ""action"": ""Time"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cea408c-8d9d-4d21-a49e-d047cec46921"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScreen;Gamepad"",
                    ""action"": ""Gyro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c014be3-3a40-4379-a718-e2a27841cabd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd2dbb80-cfd5-49fa-94b1-b7dfb8fb9c5a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9302739c-ef95-44bd-b34b-145355667601"",
                    ""path"": ""<GravitySensor>/gravity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<SwitchProControllerHID>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""TouchScreen"",
            ""bindingGroup"": ""TouchScreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Quality
        m_Quality = asset.FindActionMap("Quality", throwIfNotFound: true);
        m_Quality_LOW = m_Quality.FindAction("LOW", throwIfNotFound: true);
        m_Quality_MID = m_Quality.FindAction("MID", throwIfNotFound: true);
        m_Quality_HIGH = m_Quality.FindAction("HIGH", throwIfNotFound: true);
        // BoatControls
        m_BoatControls = asset.FindActionMap("BoatControls", throwIfNotFound: true);
        m_BoatControls_Trottle = m_BoatControls.FindAction("Trottle", throwIfNotFound: true);
        m_BoatControls_Time = m_BoatControls.FindAction("Time", throwIfNotFound: true);
        m_BoatControls_Steering = m_BoatControls.FindAction("Steering", throwIfNotFound: true);
        m_BoatControls_Reset = m_BoatControls.FindAction("Reset", throwIfNotFound: true);
        m_BoatControls_Freeze = m_BoatControls.FindAction("Freeze", throwIfNotFound: true);
        m_BoatControls_Gyro = m_BoatControls.FindAction("Gyro", throwIfNotFound: true);
        m_BoatControls_Accelerate = m_BoatControls.FindAction("Accelerate", throwIfNotFound: true);
        m_BoatControls_Gravity = m_BoatControls.FindAction("Gravity", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Quality
    private readonly InputActionMap m_Quality;
    private List<IQualityActions> m_QualityActionsCallbackInterfaces = new List<IQualityActions>();
    private readonly InputAction m_Quality_LOW;
    private readonly InputAction m_Quality_MID;
    private readonly InputAction m_Quality_HIGH;
    public struct QualityActions
    {
        private @InputControls m_Wrapper;
        public QualityActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LOW => m_Wrapper.m_Quality_LOW;
        public InputAction @MID => m_Wrapper.m_Quality_MID;
        public InputAction @HIGH => m_Wrapper.m_Quality_HIGH;
        public InputActionMap Get() { return m_Wrapper.m_Quality; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QualityActions set) { return set.Get(); }
        public void AddCallbacks(IQualityActions instance)
        {
            if (instance == null || m_Wrapper.m_QualityActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_QualityActionsCallbackInterfaces.Add(instance);
            @LOW.started += instance.OnLOW;
            @LOW.performed += instance.OnLOW;
            @LOW.canceled += instance.OnLOW;
            @MID.started += instance.OnMID;
            @MID.performed += instance.OnMID;
            @MID.canceled += instance.OnMID;
            @HIGH.started += instance.OnHIGH;
            @HIGH.performed += instance.OnHIGH;
            @HIGH.canceled += instance.OnHIGH;
        }

        private void UnregisterCallbacks(IQualityActions instance)
        {
            @LOW.started -= instance.OnLOW;
            @LOW.performed -= instance.OnLOW;
            @LOW.canceled -= instance.OnLOW;
            @MID.started -= instance.OnMID;
            @MID.performed -= instance.OnMID;
            @MID.canceled -= instance.OnMID;
            @HIGH.started -= instance.OnHIGH;
            @HIGH.performed -= instance.OnHIGH;
            @HIGH.canceled -= instance.OnHIGH;
        }

        public void RemoveCallbacks(IQualityActions instance)
        {
            if (m_Wrapper.m_QualityActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IQualityActions instance)
        {
            foreach (var item in m_Wrapper.m_QualityActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_QualityActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public QualityActions @Quality => new QualityActions(this);

    // BoatControls
    private readonly InputActionMap m_BoatControls;
    private List<IBoatControlsActions> m_BoatControlsActionsCallbackInterfaces = new List<IBoatControlsActions>();
    private readonly InputAction m_BoatControls_Trottle;
    private readonly InputAction m_BoatControls_Time;
    private readonly InputAction m_BoatControls_Steering;
    private readonly InputAction m_BoatControls_Reset;
    private readonly InputAction m_BoatControls_Freeze;
    private readonly InputAction m_BoatControls_Gyro;
    private readonly InputAction m_BoatControls_Accelerate;
    private readonly InputAction m_BoatControls_Gravity;
    public struct BoatControlsActions
    {
        private @InputControls m_Wrapper;
        public BoatControlsActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trottle => m_Wrapper.m_BoatControls_Trottle;
        public InputAction @Time => m_Wrapper.m_BoatControls_Time;
        public InputAction @Steering => m_Wrapper.m_BoatControls_Steering;
        public InputAction @Reset => m_Wrapper.m_BoatControls_Reset;
        public InputAction @Freeze => m_Wrapper.m_BoatControls_Freeze;
        public InputAction @Gyro => m_Wrapper.m_BoatControls_Gyro;
        public InputAction @Accelerate => m_Wrapper.m_BoatControls_Accelerate;
        public InputAction @Gravity => m_Wrapper.m_BoatControls_Gravity;
        public InputActionMap Get() { return m_Wrapper.m_BoatControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoatControlsActions set) { return set.Get(); }
        public void AddCallbacks(IBoatControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BoatControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoatControlsActionsCallbackInterfaces.Add(instance);
            @Trottle.started += instance.OnTrottle;
            @Trottle.performed += instance.OnTrottle;
            @Trottle.canceled += instance.OnTrottle;
            @Time.started += instance.OnTime;
            @Time.performed += instance.OnTime;
            @Time.canceled += instance.OnTime;
            @Steering.started += instance.OnSteering;
            @Steering.performed += instance.OnSteering;
            @Steering.canceled += instance.OnSteering;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Freeze.started += instance.OnFreeze;
            @Freeze.performed += instance.OnFreeze;
            @Freeze.canceled += instance.OnFreeze;
            @Gyro.started += instance.OnGyro;
            @Gyro.performed += instance.OnGyro;
            @Gyro.canceled += instance.OnGyro;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Gravity.started += instance.OnGravity;
            @Gravity.performed += instance.OnGravity;
            @Gravity.canceled += instance.OnGravity;
        }

        private void UnregisterCallbacks(IBoatControlsActions instance)
        {
            @Trottle.started -= instance.OnTrottle;
            @Trottle.performed -= instance.OnTrottle;
            @Trottle.canceled -= instance.OnTrottle;
            @Time.started -= instance.OnTime;
            @Time.performed -= instance.OnTime;
            @Time.canceled -= instance.OnTime;
            @Steering.started -= instance.OnSteering;
            @Steering.performed -= instance.OnSteering;
            @Steering.canceled -= instance.OnSteering;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Freeze.started -= instance.OnFreeze;
            @Freeze.performed -= instance.OnFreeze;
            @Freeze.canceled -= instance.OnFreeze;
            @Gyro.started -= instance.OnGyro;
            @Gyro.performed -= instance.OnGyro;
            @Gyro.canceled -= instance.OnGyro;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Gravity.started -= instance.OnGravity;
            @Gravity.performed -= instance.OnGravity;
            @Gravity.canceled -= instance.OnGravity;
        }

        public void RemoveCallbacks(IBoatControlsActions instance)
        {
            if (m_Wrapper.m_BoatControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoatControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BoatControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoatControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoatControlsActions @BoatControls => new BoatControlsActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_TouchScreenSchemeIndex = -1;
    public InputControlScheme TouchScreenScheme
    {
        get
        {
            if (m_TouchScreenSchemeIndex == -1) m_TouchScreenSchemeIndex = asset.FindControlSchemeIndex("TouchScreen");
            return asset.controlSchemes[m_TouchScreenSchemeIndex];
        }
    }
    public interface IQualityActions
    {
        void OnLOW(InputAction.CallbackContext context);
        void OnMID(InputAction.CallbackContext context);
        void OnHIGH(InputAction.CallbackContext context);
    }
    public interface IBoatControlsActions
    {
        void OnTrottle(InputAction.CallbackContext context);
        void OnTime(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnFreeze(InputAction.CallbackContext context);
        void OnGyro(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
        void OnGravity(InputAction.CallbackContext context);
    }
}
